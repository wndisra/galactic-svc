// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_spaceship is a generated GoMock package.
package mock_spaceship

import (
	context "context"
	reflect "reflect"

	entity "github.com/wndisra/galactic-svc/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockSpaceShipRepository is a mock of SpaceShipRepository interface.
type MockSpaceShipRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSpaceShipRepositoryMockRecorder
}

// MockSpaceShipRepositoryMockRecorder is the mock recorder for MockSpaceShipRepository.
type MockSpaceShipRepositoryMockRecorder struct {
	mock *MockSpaceShipRepository
}

// NewMockSpaceShipRepository creates a new mock instance.
func NewMockSpaceShipRepository(ctrl *gomock.Controller) *MockSpaceShipRepository {
	mock := &MockSpaceShipRepository{ctrl: ctrl}
	mock.recorder = &MockSpaceShipRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpaceShipRepository) EXPECT() *MockSpaceShipRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockSpaceShipRepository) Delete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSpaceShipRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSpaceShipRepository)(nil).Delete), ctx, id)
}

// DeleteArmaments mocks base method.
func (m *MockSpaceShipRepository) DeleteArmaments(ctx context.Context, spaceshipID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArmaments", ctx, spaceshipID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteArmaments indicates an expected call of DeleteArmaments.
func (mr *MockSpaceShipRepositoryMockRecorder) DeleteArmaments(ctx, spaceshipID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArmaments", reflect.TypeOf((*MockSpaceShipRepository)(nil).DeleteArmaments), ctx, spaceshipID)
}

// GetAll mocks base method.
func (m *MockSpaceShipRepository) GetAll(ctx context.Context, req entity.SpaceShip) ([]entity.SpaceShip, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, req)
	ret0, _ := ret[0].([]entity.SpaceShip)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSpaceShipRepositoryMockRecorder) GetAll(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSpaceShipRepository)(nil).GetAll), ctx, req)
}

// GetByID mocks base method.
func (m *MockSpaceShipRepository) GetByID(ctx context.Context, id int64) (entity.SpaceShip, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(entity.SpaceShip)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockSpaceShipRepositoryMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockSpaceShipRepository)(nil).GetByID), ctx, id)
}

// Insert mocks base method.
func (m *MockSpaceShipRepository) Insert(ctx context.Context, req entity.SpaceShip) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockSpaceShipRepositoryMockRecorder) Insert(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockSpaceShipRepository)(nil).Insert), ctx, req)
}

// Update mocks base method.
func (m *MockSpaceShipRepository) Update(ctx context.Context, id int64, req entity.SpaceShip) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSpaceShipRepositoryMockRecorder) Update(ctx, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSpaceShipRepository)(nil).Update), ctx, id, req)
}
